{
    "variables": {
        "admin_username": "admin",
        "admin_password": "admin",

        "dir_deploy": null,
        "dir_http_user": null,
        "dir_temp": null,

        "product_name": "not_really_a_product_name",

        "vm_name": "not_really_a_vm_name",
        "vm_ram_size_in_mb": "1024",
        "vm_switch_name": "this_switch_does_not_exist",
        "vm_switch_vlan": ""
    },
    "builders": [
        {
            "boot_wait": "30s",
            "boot_command": [],
            "clone_from_vmxc_path": "{{ user `dir_temp` }}/{{ user `vm_name` }}",
            "communicator": "ssh",
            "enable_dynamic_memory": false,
            "enable_mac_spoofing": false,
            "enable_secure_boot": false,
            "enable_virtualization_extensions": false,
            "generation": 2,
            "guest_additions_mode": "disable",
            "http_directory": "{{ user `dir_http_user` }}",
            "http_port_min": 8150,
            "http_port_max": 8160,
            "output_directory": "{{ user `dir_temp` }}/test-{{ user `vm_name` }}",
            "ram_size": "{{ user `vm_ram_size_in_mb` }}",
            "secondary_iso_images": [
                "{{ user `dir_deploy` }}/{{ user `product_name` }}-test-provision.iso"
            ],
            "shutdown_command": "echo '{{user `admin_password`}}' | sudo -S -E shutdown -P now",
            "shutdown_timeout": "5m",
            "skip_compaction": true,
            "ssh_password": "{{user `admin_password`}}",
            "ssh_timeout": "4h",
            "ssh_username": "{{user `admin_username`}}",
            "switch_name": "{{user `vm_switch_name`}}",
            "type": "hyperv-vmcx",
            "vlan_id": "{{ user `vm_switch_vlan` }}",
            "vm_name": "test-{{ user `vm_name` }}"
        }
    ],
    "provisioners": [
        {
            "expect_disconnect" : true,
            "inline": [
                "echo \"Waiting for reboot after provisioning ...\""
            ],
            "pause_before" : "30s",
            "type": "shell"
        },
        {
            "expect_disconnect": false,
            "inline": [
                "echo '{{user `admin_password`}}' | sudo -S -E mkdir -m 777 /test"
            ],
            "type": "shell"
        },
        {
            "destination": "/test/pester/",
            "source": "{{ user `dir_temp` }}/tests/integration/pester",
            "type": "file"
        },
        {
            "expect_disconnect": false,
            "inline": [
                "(/usr/lib/update-notifier/apt-check --package-names 2>&1) &>> /test/updates.txt"
            ],
            "type": "shell"
        },
        {
            "expect_disconnect": false,
            "inline": [
                "echo '{{user `admin_password`}}' | sudo -S -E apt-get update",
                "echo '{{user `admin_password`}}' | sudo -S -E apt install --assume-yes curl",
                "curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -",
                "curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | sudo tee /etc/apt/sources.list.d/microsoft.list",
                "echo '{{user `admin_password`}}' | sudo -S -E apt-get update",
                "echo '{{user `admin_password`}}' | sudo -S -E apt-get install --assume-yes powershell",
                "echo '{{user `admin_password`}}' | sudo -S -E apt-get install --assume-yes unzip"
            ],
            "type": "shell"
        },
        {
            "expect_disconnect": false,
            "inline": [
                "echo '{{user `admin_password`}}' | sudo -S -E pwsh -Command '. /test/pester/environment/Initialize-Environment.ps1; Initialize-Environment'"
            ],
            "type": "shell"
        },
        {
            "expect_disconnect": false,
            "inline": [
                "echo '{{user `admin_password`}}' | sudo -S -E pwsh -Command '$ErrorActionPreference = \"Stop\"; Set-PSRepository -Name PSGallery -InstallationPolicy Trusted '",
                "echo '{{user `admin_password`}}' | sudo -S -E pwsh -Command '$ErrorActionPreference = \"Stop\"; Install-Module Pester '",
                "echo '{{user `admin_password`}}' | sudo -S -E pwsh -Command '$ErrorActionPreference = \"Stop\"; $result = Invoke-Pester -Script /test/pester/* -PassThru; exit $result.FailedCount '"
            ],
            "type": "shell"
        }
    ]
}
